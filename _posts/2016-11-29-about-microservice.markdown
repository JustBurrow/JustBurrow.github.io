---
layout: post
title: Microservice architecture에 관한 잡생각
---

C 프로그래밍을 거의 하지 않았기 때문에, 아는 바 거의 없는 시대이지만, 어쨌든 과거에 Procedure 프로그래밍이 있었다. 물론 어셈블리나 기계어의 시대도 있었지만 그건 거의 선사시대에 메머드 똥침놓던 시절의 느낌이니 빼자. 손바닥 터져라 비벼서 불피우는 건 재미나 특수한 환경 때문에 하는 거지 일상 생활은 아니다.

어쨌거나 프로시듀어 프로그래밍이 있었고 개발과 개선의 결과, 많은 소스코드가 요즘 우리가 OOP가 뭔지도 모르는 자가 써갈긴 거라고 욕하는 바로 그 스파게티 메서드 처럼 무수한 분기문가 반복문의 합체를 C&P 해놓은 그런 괴물이었을 것이다. 개발자를 덮쳐 악취를 풍기며 퇴근을 잡아먹으며 과로사를 일으키는 괴물.

IT 업계가 성장하면서 소프트웨어의 수도, 하나의 소프트웨어의 크기도 커졌고 개발의 복잡성은 더더욱 커졌다. 이런 복잡성은 직접 개발한 당사자가 아니면 손댈 수 없는, 도움을 구할 수도 인수인계를 할 수도 없는 상태로 돌진했고, 아마도 순진했던 개발자는 급여와 계약에 묶여 수명을 팔다가 생명력을 팔아야 하는 처지가 됐다. 실무에 파뭍혀 정치질을 할 수 없었으니 상황의 악화를 막을 기회도 잡지 못했다. 그러다 더러는 생명력이 바닥나고 말았다. 개발자는 살아야 했다.

소프트웨어 개발이란 기본적으로 어려운 일이다. 인간의 방식이 아닌 기계의 방식으로 생각해야 할 수 있는 일이니까. 사고방식을 바꾸는 것은 정말 어렵다. 천동설의 사고방식은 지동설의 사고방식으로 바꾸는 것은 성공했어도, 나이가 몇 살 많거나 적은 사람의 가치기준은 이해하지 못한다.

## 재사용성

어쨌거나, 그런 어려움을 조금이라도 줄여보고자 무수한 노력을 기울였다. 그리고 그 노력은 한 마디로 "재사용성을 높이려는 노력"이라고 정리할 수 있다.

그렇다. 우리는 재사용성을 조금이라도 끌어올려보고자 무수한 삽을 푸는 것이다. 변수와 함수를 재사용 해보고자 OOP라는 개념을 개발했고, SOLID나 DRY 같은 원칙을 만들고, 여러 단계와 분기와 반복을 한번에 재사용 해보고자 모듈과 라이브러리를 만들고, 다른 소프트웨어를 재사용하자고 컴포넌트(CBD)륾 만들고, 서버 단위로 재사용 해보고자 SOA를 만들었다.
